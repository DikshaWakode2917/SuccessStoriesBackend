package com.successStory.main.Controller;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.successStory.main.Payloads.MYP_ResultsDto;
import com.successStory.main.Repositories.MYP_ResultsRepo;
import com.successStory.main.Service.MYP_ResultsService;

@CrossOrigin
@RestController
@RequestMapping("/api/myp_results")
@Component
public class MYP_ResultsController {

	@Autowired
	MYP_ResultsService myp_resultsService;
	
	@Autowired
	MYP_ResultsRepo myp_resultsRepo;
	
	@PostMapping
	public ResponseEntity<MYP_ResultsDto> aaddMYP_Result(@RequestBody MYP_ResultsDto myp_resultsDto) {
		
		MYP_ResultsDto aaddedMYP_Result = this.myp_resultsService.addMYP_Result(myp_resultsDto);
		return ResponseEntity.ok(aaddedMYP_Result);
	}
	
	@GetMapping
	public ResponseEntity<List<MYP_ResultsDto>> getAllMYP_Results() {
		return ResponseEntity.ok(this.myp_resultsService.getAllMYP_Results());
	}
	
	@GetMapping("/{student_Name}")
	public ResponseEntity<?> findByStudentName(@PathVariable String student_Name) {
		try {
			String decodedStudentName = URLDecoder.decode(student_Name, StandardCharsets.UTF_8.toString());
			
			List<MYP_ResultsDto> myp_resultdsDtoList = (List<MYP_ResultsDto>) this.findByStudentName(decodedStudentName);
			
			if (myp_resultdsDtoList != null && !myp_resultdsDtoList.isEmpty()) {
				return ResponseEntity.ok(myp_resultdsDtoList);
			}
			else {
				return ResponseEntity.notFound().build();
			}
		}
		catch (UnsupportedEncodingException e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error decoding URL parameter");
		}
	}
	
	@DeleteMapping()
	public List<MYP_ResultsDto> deleteAllMYP_Results() {
		List<MYP_ResultsDto> deletedAllMYP_Results = this.myp_resultsService.getAllMYP_Results();
		
		this.myp_resultsService.deleteAllMYP_Results();
		return deletedAllMYP_Results;
	}
}
